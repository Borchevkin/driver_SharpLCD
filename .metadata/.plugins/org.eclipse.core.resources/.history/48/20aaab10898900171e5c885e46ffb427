#include <stdbool.h>
#include <stdint.h>
#include "em_device.h"
#include "em_chip.h"
#include "em_gpio.h"
#include "em_cmu.h"
#include "em_usart.h"
#include "InitDevice.h"
#include "sharpLCD.h"
#include "bsp.h"

sharplcd_t sharplcd;

uint8_t current_vcom = SHARPLCD_VCOM_HI_CMD;

/* =====Counts 1ms timeTicks===== */
volatile uint32_t msTicks = 0;

/* =====Interrupt Handlers Section===== */
void SysTick_Handler(void)
{
	msTicks++;
}

/* =====================Main Section===================== */
int main(void)
{
	// Chip errata
	CHIP_Init();
	enter_DefaultMode_from_RESET();

	SysTick_Config(CMU_ClockFreqGet(cmuClock_CORE) / 1000);

	// Init Display
	SHARPLCD_Init(&sharplcd);

	//Set Display ON
	DISPLAY_SetDISP();

	while (1)
	{
		//Straight line
		uint8_t line_1[12] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

		//LEDs
		GPIO_PinOutToggle(LED0_PORT, LED0_PIN);
		GPIO_PinOutToggle(LED1_PORT, LED1_PIN);

		// ========== Test Field

		SHARPLCD_WriteLine(&sharplcd, 2, line_1);
		Delay(500);
		SHARPLCD_WriteLine(&sharplcd, 4, line_1);
		Delay(500);
		SHARPLCD_WriteLine(&sharplcd, 6, line_1);
		Delay(500);
		SHARPLCD_Clear(&sharplcd);

		// =========TEST LINE
		SPI1_SetMSBFirst();											//Set MSB
		DISPLAY_SetCS();											//Set CS
		USART_SpiTransfer(USART1, SHARPLCD_WRITE_CMD | current_vcom);		//Line and Vcom
		SPI1_SetLSBFirst();											//Set LSB
		SPI1_SendPacket(2, 1);							//Line number
		SPI1_SendPacket(line_1, 12);								//Data
		SPI1_SendPacket((uint8_t *)(SHARPLCD_NULL_BYTE), 1);		//==Trailer==
		SPI1_SendPacket((uint8_t *)(SHARPLCD_NULL_BYTE), 1);		//===========
		DISPLAY_ClearCS();											//Clear CS
		SPI1_SetMSBFirst();											//Set MSB
	}
}
/* ============================================================ */
